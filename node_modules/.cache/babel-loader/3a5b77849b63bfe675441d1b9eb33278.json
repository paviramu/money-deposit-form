{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LineBreaker = exports.inlineBreakOpportunities = exports.lineBreakAtIndex = exports.codePointsToCharacterClasses = exports.UnicodeTrie = exports.BREAK_ALLOWED = exports.BREAK_NOT_ALLOWED = exports.BREAK_MANDATORY = exports.classes = exports.LETTER_NUMBER_MODIFIER = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _Trie = require('./Trie');\n\nvar _linebreakTrie = require('./linebreak-trie');\n\nvar _linebreakTrie2 = _interopRequireDefault(_linebreakTrie);\n\nvar _Util = require('./Util');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar LETTER_NUMBER_MODIFIER = exports.LETTER_NUMBER_MODIFIER = 50; // Non-tailorable Line Breaking Classes\n\nvar BK = 1; //  Cause a line break (after)\n\nvar CR = 2; //  Cause a line break (after), except between CR and LF\n\nvar LF = 3; //  Cause a line break (after)\n\nvar CM = 4; //  Prohibit a line break between the character and the preceding character\n\nvar NL = 5; //  Cause a line break (after)\n\nvar SG = 6; //  Do not occur in well-formed text\n\nvar WJ = 7; //  Prohibit line breaks before and after\n\nvar ZW = 8; //  Provide a break opportunity\n\nvar GL = 9; //  Prohibit line breaks before and after\n\nvar SP = 10; // Enable indirect line breaks\n\nvar ZWJ = 11; // Prohibit line breaks within joiner sequences\n// Break Opportunities\n\nvar B2 = 12; //  Provide a line break opportunity before and after the character\n\nvar BA = 13; //  Generally provide a line break opportunity after the character\n\nvar BB = 14; //  Generally provide a line break opportunity before the character\n\nvar HY = 15; //  Provide a line break opportunity after the character, except in numeric context\n\nvar CB = 16; //   Provide a line break opportunity contingent on additional information\n// Characters Prohibiting Certain Breaks\n\nvar CL = 17; //  Prohibit line breaks before\n\nvar CP = 18; //  Prohibit line breaks before\n\nvar EX = 19; //  Prohibit line breaks before\n\nvar IN = 20; //  Allow only indirect line breaks between pairs\n\nvar NS = 21; //  Allow only indirect line breaks before\n\nvar OP = 22; //  Prohibit line breaks after\n\nvar QU = 23; //  Act like they are both opening and closing\n// Numeric Context\n\nvar IS = 24; //  Prevent breaks after any and before numeric\n\nvar NU = 25; //  Form numeric expressions for line breaking purposes\n\nvar PO = 26; //  Do not break following a numeric expression\n\nvar PR = 27; //  Do not break in front of a numeric expression\n\nvar SY = 28; //  Prevent a break before; and allow a break after\n// Other Characters\n\nvar AI = 29; //  Act like AL when the resolvedEAW is N; otherwise; act as ID\n\nvar AL = 30; //  Are alphabetic characters or symbols that are used with alphabetic characters\n\nvar CJ = 31; //  Treat as NS or ID for strict or normal breaking.\n\nvar EB = 32; //  Do not break from following Emoji Modifier\n\nvar EM = 33; //  Do not break from preceding Emoji Base\n\nvar H2 = 34; //  Form Korean syllable blocks\n\nvar H3 = 35; //  Form Korean syllable blocks\n\nvar HL = 36; //  Do not break around a following hyphen; otherwise act as Alphabetic\n\nvar ID = 37; //  Break before or after; except in some numeric context\n\nvar JL = 38; //  Form Korean syllable blocks\n\nvar JV = 39; //  Form Korean syllable blocks\n\nvar JT = 40; //  Form Korean syllable blocks\n\nvar RI = 41; //  Keep pairs together. For pairs; break before and after other classes\n\nvar SA = 42; //  Provide a line break opportunity contingent on additional, language-specific context analysis\n\nvar XX = 43; //  Have as yet unknown line breaking behavior or unassigned code positions\n\nvar classes = exports.classes = {\n  BK: BK,\n  CR: CR,\n  LF: LF,\n  CM: CM,\n  NL: NL,\n  SG: SG,\n  WJ: WJ,\n  ZW: ZW,\n  GL: GL,\n  SP: SP,\n  ZWJ: ZWJ,\n  B2: B2,\n  BA: BA,\n  BB: BB,\n  HY: HY,\n  CB: CB,\n  CL: CL,\n  CP: CP,\n  EX: EX,\n  IN: IN,\n  NS: NS,\n  OP: OP,\n  QU: QU,\n  IS: IS,\n  NU: NU,\n  PO: PO,\n  PR: PR,\n  SY: SY,\n  AI: AI,\n  AL: AL,\n  CJ: CJ,\n  EB: EB,\n  EM: EM,\n  H2: H2,\n  H3: H3,\n  HL: HL,\n  ID: ID,\n  JL: JL,\n  JV: JV,\n  JT: JT,\n  RI: RI,\n  SA: SA,\n  XX: XX\n};\nvar BREAK_MANDATORY = exports.BREAK_MANDATORY = '!';\nvar BREAK_NOT_ALLOWED = exports.BREAK_NOT_ALLOWED = '×';\nvar BREAK_ALLOWED = exports.BREAK_ALLOWED = '÷';\nvar UnicodeTrie = exports.UnicodeTrie = (0, _Trie.createTrieFromBase64)(_linebreakTrie2.default);\nvar ALPHABETICS = [AL, HL];\nvar HARD_LINE_BREAKS = [BK, CR, LF, NL];\nvar SPACE = [SP, ZW];\nvar PREFIX_POSTFIX = [PR, PO];\nvar LINE_BREAKS = HARD_LINE_BREAKS.concat(SPACE);\nvar KOREAN_SYLLABLE_BLOCK = [JL, JV, JT, H2, H3];\nvar HYPHEN = [HY, BA];\n\nvar codePointsToCharacterClasses = exports.codePointsToCharacterClasses = function codePointsToCharacterClasses(codePoints) {\n  var lineBreak = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'strict';\n  var types = [];\n  var indicies = [];\n  var categories = [];\n  codePoints.forEach(function (codePoint, index) {\n    var classType = UnicodeTrie.get(codePoint);\n\n    if (classType > LETTER_NUMBER_MODIFIER) {\n      categories.push(true);\n      classType -= LETTER_NUMBER_MODIFIER;\n    } else {\n      categories.push(false);\n    }\n\n    if (['normal', 'auto', 'loose'].indexOf(lineBreak) !== -1) {\n      // U+2010, – U+2013, 〜 U+301C, ゠ U+30A0\n      if ([0x2010, 0x2013, 0x301c, 0x30a0].indexOf(codePoint) !== -1) {\n        indicies.push(index);\n        return types.push(CB);\n      }\n    }\n\n    if (classType === CM || classType === ZWJ) {\n      // LB10 Treat any remaining combining mark or ZWJ as AL.\n      if (index === 0) {\n        indicies.push(index);\n        return types.push(AL);\n      } // LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of\n      // the base character in all of the following rules. Treat ZWJ as if it were CM.\n\n\n      var prev = types[index - 1];\n\n      if (LINE_BREAKS.indexOf(prev) === -1) {\n        indicies.push(indicies[index - 1]);\n        return types.push(prev);\n      }\n\n      indicies.push(index);\n      return types.push(AL);\n    }\n\n    indicies.push(index);\n\n    if (classType === CJ) {\n      return types.push(lineBreak === 'strict' ? NS : ID);\n    }\n\n    if (classType === SA) {\n      return types.push(AL);\n    }\n\n    if (classType === AI) {\n      return types.push(AL);\n    } // For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL\n    // and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised\n    // to take into account the actual line breaking properties for these characters.\n\n\n    if (classType === XX) {\n      if (codePoint >= 0x20000 && codePoint <= 0x2fffd || codePoint >= 0x30000 && codePoint <= 0x3fffd) {\n        return types.push(ID);\n      } else {\n        return types.push(AL);\n      }\n    }\n\n    types.push(classType);\n  });\n  return [indicies, types, categories];\n};\n\nvar isAdjacentWithSpaceIgnored = function isAdjacentWithSpaceIgnored(a, b, currentIndex, classTypes) {\n  var current = classTypes[currentIndex];\n\n  if (Array.isArray(a) ? a.indexOf(current) !== -1 : a === current) {\n    var i = currentIndex;\n\n    while (i <= classTypes.length) {\n      i++;\n      var next = classTypes[i];\n\n      if (next === b) {\n        return true;\n      }\n\n      if (next !== SP) {\n        break;\n      }\n    }\n  }\n\n  if (current === SP) {\n    var _i = currentIndex;\n\n    while (_i > 0) {\n      _i--;\n      var prev = classTypes[_i];\n\n      if (Array.isArray(a) ? a.indexOf(prev) !== -1 : a === prev) {\n        var n = currentIndex;\n\n        while (n <= classTypes.length) {\n          n++;\n          var _next = classTypes[n];\n\n          if (_next === b) {\n            return true;\n          }\n\n          if (_next !== SP) {\n            break;\n          }\n        }\n      }\n\n      if (prev !== SP) {\n        break;\n      }\n    }\n  }\n\n  return false;\n};\n\nvar previousNonSpaceClassType = function previousNonSpaceClassType(currentIndex, classTypes) {\n  var i = currentIndex;\n\n  while (i >= 0) {\n    var type = classTypes[i];\n\n    if (type === SP) {\n      i--;\n    } else {\n      return type;\n    }\n  }\n\n  return 0;\n};\n\nvar _lineBreakAtIndex = function _lineBreakAtIndex(codePoints, classTypes, indicies, index, forbiddenBreaks) {\n  if (indicies[index] === 0) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  var currentIndex = index - 1;\n\n  if (Array.isArray(forbiddenBreaks) && forbiddenBreaks[currentIndex] === true) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  var beforeIndex = currentIndex - 1;\n  var afterIndex = currentIndex + 1;\n  var current = classTypes[currentIndex]; // LB4 Always break after hard line breaks.\n  // LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.\n\n  var before = beforeIndex >= 0 ? classTypes[beforeIndex] : 0;\n  var next = classTypes[afterIndex];\n\n  if (current === CR && next === LF) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  if (HARD_LINE_BREAKS.indexOf(current) !== -1) {\n    return BREAK_MANDATORY;\n  } // LB6 Do not break before hard line breaks.\n\n\n  if (HARD_LINE_BREAKS.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  } // LB7 Do not break before spaces or zero width space.\n\n\n  if (SPACE.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  } // LB8 Break before any character following a zero-width space, even if one or more spaces intervene.\n\n\n  if (previousNonSpaceClassType(currentIndex, classTypes) === ZW) {\n    return BREAK_ALLOWED;\n  } // LB8a Do not break between a zero width joiner and an ideograph, emoji base or emoji modifier.\n\n\n  if (UnicodeTrie.get(codePoints[currentIndex]) === ZWJ && (next === ID || next === EB || next === EM)) {\n    return BREAK_NOT_ALLOWED;\n  } // LB11 Do not break before or after Word joiner and related characters.\n\n\n  if (current === WJ || next === WJ) {\n    return BREAK_NOT_ALLOWED;\n  } // LB12 Do not break after NBSP and related characters.\n\n\n  if (current === GL) {\n    return BREAK_NOT_ALLOWED;\n  } // LB12a Do not break before NBSP and related characters, except after spaces and hyphens.\n\n\n  if ([SP, BA, HY].indexOf(current) === -1 && next === GL) {\n    return BREAK_NOT_ALLOWED;\n  } // LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.\n\n\n  if ([CL, CP, EX, IS, SY].indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  } // LB14 Do not break after ‘[’, even after spaces.\n\n\n  if (previousNonSpaceClassType(currentIndex, classTypes) === OP) {\n    return BREAK_NOT_ALLOWED;\n  } // LB15 Do not break within ‘”[’, even with intervening spaces.\n\n\n  if (isAdjacentWithSpaceIgnored(QU, OP, currentIndex, classTypes)) {\n    return BREAK_NOT_ALLOWED;\n  } // LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.\n\n\n  if (isAdjacentWithSpaceIgnored([CL, CP], NS, currentIndex, classTypes)) {\n    return BREAK_NOT_ALLOWED;\n  } // LB17 Do not break within ‘——’, even with intervening spaces.\n\n\n  if (isAdjacentWithSpaceIgnored(B2, B2, currentIndex, classTypes)) {\n    return BREAK_NOT_ALLOWED;\n  } // LB18 Break after spaces.\n\n\n  if (current === SP) {\n    return BREAK_ALLOWED;\n  } // LB19 Do not break before or after quotation marks, such as ‘ ” ’.\n\n\n  if (current === QU || next === QU) {\n    return BREAK_NOT_ALLOWED;\n  } // LB20 Break before and after unresolved CB.\n\n\n  if (next === CB || current === CB) {\n    return BREAK_ALLOWED;\n  } // LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.\n\n\n  if ([BA, HY, NS].indexOf(next) !== -1 || current === BB) {\n    return BREAK_NOT_ALLOWED;\n  } // LB21a Don't break after Hebrew + Hyphen.\n\n\n  if (before === HL && HYPHEN.indexOf(current) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  } // LB21b Don’t break between Solidus and Hebrew letters.\n\n\n  if (current === SY && next === HL) {\n    return BREAK_NOT_ALLOWED;\n  } // LB22 Do not break between two ellipses, or between letters, numbers or exclamations and ellipsis.\n\n\n  if (next === IN && ALPHABETICS.concat(IN, EX, NU, ID, EB, EM).indexOf(current) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  } // LB23 Do not break between digits and letters.\n\n\n  if (ALPHABETICS.indexOf(next) !== -1 && current === NU || ALPHABETICS.indexOf(current) !== -1 && next === NU) {\n    return BREAK_NOT_ALLOWED;\n  } // LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.\n\n\n  if (current === PR && [ID, EB, EM].indexOf(next) !== -1 || [ID, EB, EM].indexOf(current) !== -1 && next === PO) {\n    return BREAK_NOT_ALLOWED;\n  } // LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.\n\n\n  if (ALPHABETICS.indexOf(current) !== -1 && PREFIX_POSTFIX.indexOf(next) !== -1 || PREFIX_POSTFIX.indexOf(current) !== -1 && ALPHABETICS.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  } // LB25 Do not break between the following pairs of classes relevant to numbers:\n\n\n  if ( // (PR | PO) × ( OP | HY )? NU\n  [PR, PO].indexOf(current) !== -1 && (next === NU || [OP, HY].indexOf(next) !== -1 && classTypes[afterIndex + 1] === NU) || // ( OP | HY ) × NU\n  [OP, HY].indexOf(current) !== -1 && next === NU || // NU ×\t(NU | SY | IS)\n  current === NU && [NU, SY, IS].indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  } // NU (NU | SY | IS)* × (NU | SY | IS | CL | CP)\n\n\n  if ([NU, SY, IS, CL, CP].indexOf(next) !== -1) {\n    var prevIndex = currentIndex;\n\n    while (prevIndex >= 0) {\n      var type = classTypes[prevIndex];\n\n      if (type === NU) {\n        return BREAK_NOT_ALLOWED;\n      } else if ([SY, IS].indexOf(type) !== -1) {\n        prevIndex--;\n      } else {\n        break;\n      }\n    }\n  } // NU (NU | SY | IS)* (CL | CP)? × (PO | PR))\n\n\n  if ([PR, PO].indexOf(next) !== -1) {\n    var _prevIndex = [CL, CP].indexOf(current) !== -1 ? beforeIndex : currentIndex;\n\n    while (_prevIndex >= 0) {\n      var _type = classTypes[_prevIndex];\n\n      if (_type === NU) {\n        return BREAK_NOT_ALLOWED;\n      } else if ([SY, IS].indexOf(_type) !== -1) {\n        _prevIndex--;\n      } else {\n        break;\n      }\n    }\n  } // LB26 Do not break a Korean syllable.\n\n\n  if (JL === current && [JL, JV, H2, H3].indexOf(next) !== -1 || [JV, H2].indexOf(current) !== -1 && [JV, JT].indexOf(next) !== -1 || [JT, H3].indexOf(current) !== -1 && next === JT) {\n    return BREAK_NOT_ALLOWED;\n  } // LB27 Treat a Korean Syllable Block the same as ID.\n\n\n  if (KOREAN_SYLLABLE_BLOCK.indexOf(current) !== -1 && [IN, PO].indexOf(next) !== -1 || KOREAN_SYLLABLE_BLOCK.indexOf(next) !== -1 && current === PR) {\n    return BREAK_NOT_ALLOWED;\n  } // LB28 Do not break between alphabetics (“at”).\n\n\n  if (ALPHABETICS.indexOf(current) !== -1 && ALPHABETICS.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  } // LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).\n\n\n  if (current === IS && ALPHABETICS.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  } // LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.\n\n\n  if (ALPHABETICS.concat(NU).indexOf(current) !== -1 && next === OP || ALPHABETICS.concat(NU).indexOf(next) !== -1 && current === CP) {\n    return BREAK_NOT_ALLOWED;\n  } // LB30a Break between two regional indicator symbols if and only if there are an even number of regional\n  // indicators preceding the position of the break.\n\n\n  if (current === RI && next === RI) {\n    var i = indicies[currentIndex];\n    var count = 1;\n\n    while (i > 0) {\n      i--;\n\n      if (classTypes[i] === RI) {\n        count++;\n      } else {\n        break;\n      }\n    }\n\n    if (count % 2 !== 0) {\n      return BREAK_NOT_ALLOWED;\n    }\n  } // LB30b Do not break between an emoji base and an emoji modifier.\n\n\n  if (current === EB && next === EM) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  return BREAK_ALLOWED;\n};\n\nvar lineBreakAtIndex = exports.lineBreakAtIndex = function lineBreakAtIndex(codePoints, index) {\n  // LB2 Never break at the start of text.\n  if (index === 0) {\n    return BREAK_NOT_ALLOWED;\n  } // LB3 Always break at the end of text.\n\n\n  if (index >= codePoints.length) {\n    return BREAK_MANDATORY;\n  }\n\n  var _codePointsToCharacte = codePointsToCharacterClasses(codePoints),\n      _codePointsToCharacte2 = _slicedToArray(_codePointsToCharacte, 2),\n      indicies = _codePointsToCharacte2[0],\n      classTypes = _codePointsToCharacte2[1];\n\n  return _lineBreakAtIndex(codePoints, classTypes, indicies, index);\n};\n\nvar cssFormattedClasses = function cssFormattedClasses(codePoints, options) {\n  if (!options) {\n    options = {\n      lineBreak: 'normal',\n      wordBreak: 'normal'\n    };\n  }\n\n  var _codePointsToCharacte3 = codePointsToCharacterClasses(codePoints, options.lineBreak),\n      _codePointsToCharacte4 = _slicedToArray(_codePointsToCharacte3, 3),\n      indicies = _codePointsToCharacte4[0],\n      classTypes = _codePointsToCharacte4[1],\n      isLetterNumber = _codePointsToCharacte4[2];\n\n  if (options.wordBreak === 'break-all' || options.wordBreak === 'break-word') {\n    classTypes = classTypes.map(function (type) {\n      return [NU, AL, SA].indexOf(type) !== -1 ? ID : type;\n    });\n  }\n\n  var forbiddenBreakpoints = options.wordBreak === 'keep-all' ? isLetterNumber.map(function (isLetterNumber, i) {\n    return isLetterNumber && codePoints[i] >= 0x4e00 && codePoints[i] <= 0x9fff;\n  }) : null;\n  return [indicies, classTypes, forbiddenBreakpoints];\n};\n\nvar inlineBreakOpportunities = exports.inlineBreakOpportunities = function inlineBreakOpportunities(str, options) {\n  var codePoints = (0, _Util.toCodePoints)(str);\n  var output = BREAK_NOT_ALLOWED;\n\n  var _cssFormattedClasses = cssFormattedClasses(codePoints, options),\n      _cssFormattedClasses2 = _slicedToArray(_cssFormattedClasses, 3),\n      indicies = _cssFormattedClasses2[0],\n      classTypes = _cssFormattedClasses2[1],\n      forbiddenBreakpoints = _cssFormattedClasses2[2];\n\n  codePoints.forEach(function (codePoint, i) {\n    output += (0, _Util.fromCodePoint)(codePoint) + (i >= codePoints.length - 1 ? BREAK_MANDATORY : _lineBreakAtIndex(codePoints, classTypes, indicies, i + 1, forbiddenBreakpoints));\n  });\n  return output;\n};\n\nvar Break = function () {\n  function Break(codePoints, lineBreak, start, end) {\n    _classCallCheck(this, Break);\n\n    this._codePoints = codePoints;\n    this.required = lineBreak === BREAK_MANDATORY;\n    this.start = start;\n    this.end = end;\n  }\n\n  _createClass(Break, [{\n    key: 'slice',\n    value: function slice() {\n      return _Util.fromCodePoint.apply(undefined, _toConsumableArray(this._codePoints.slice(this.start, this.end)));\n    }\n  }]);\n\n  return Break;\n}();\n\nvar LineBreaker = exports.LineBreaker = function LineBreaker(str, options) {\n  var codePoints = (0, _Util.toCodePoints)(str);\n\n  var _cssFormattedClasses3 = cssFormattedClasses(codePoints, options),\n      _cssFormattedClasses4 = _slicedToArray(_cssFormattedClasses3, 3),\n      indicies = _cssFormattedClasses4[0],\n      classTypes = _cssFormattedClasses4[1],\n      forbiddenBreakpoints = _cssFormattedClasses4[2];\n\n  var length = codePoints.length;\n  var lastEnd = 0;\n  var nextIndex = 0;\n  return {\n    next: function next() {\n      if (nextIndex >= length) {\n        return {\n          done: true\n        };\n      }\n\n      var lineBreak = BREAK_NOT_ALLOWED;\n\n      while (nextIndex < length && (lineBreak = _lineBreakAtIndex(codePoints, classTypes, indicies, ++nextIndex, forbiddenBreakpoints)) === BREAK_NOT_ALLOWED) {}\n\n      if (lineBreak !== BREAK_NOT_ALLOWED || nextIndex === length) {\n        var value = new Break(codePoints, lineBreak, lastEnd, nextIndex);\n        lastEnd = nextIndex;\n        return {\n          value: value,\n          done: false\n        };\n      }\n\n      return {\n        done: true\n      };\n    }\n  };\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","LineBreaker","inlineBreakOpportunities","lineBreakAtIndex","codePointsToCharacterClasses","UnicodeTrie","BREAK_ALLOWED","BREAK_NOT_ALLOWED","BREAK_MANDATORY","classes","LETTER_NUMBER_MODIFIER","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_i","Symbol","iterator","_s","next","done","push","err","Array","isArray","TypeError","_Trie","require","_linebreakTrie","_linebreakTrie2","_interopRequireDefault","_Util","obj","__esModule","default","_toConsumableArray","arr2","from","_classCallCheck","instance","BK","CR","LF","CM","NL","SG","WJ","ZW","GL","SP","ZWJ","B2","BA","BB","HY","CB","CL","CP","EX","IN","NS","OP","QU","IS","NU","PO","PR","SY","AI","AL","CJ","EB","EM","H2","H3","HL","ID","JL","JV","JT","RI","SA","XX","createTrieFromBase64","ALPHABETICS","HARD_LINE_BREAKS","SPACE","PREFIX_POSTFIX","LINE_BREAKS","concat","KOREAN_SYLLABLE_BLOCK","HYPHEN","codePoints","lineBreak","arguments","types","indicies","categories","forEach","codePoint","index","classType","get","indexOf","prev","isAdjacentWithSpaceIgnored","a","b","currentIndex","classTypes","current","n","_next","previousNonSpaceClassType","type","_lineBreakAtIndex","forbiddenBreaks","beforeIndex","afterIndex","before","prevIndex","_prevIndex","_type","count","_codePointsToCharacte","_codePointsToCharacte2","cssFormattedClasses","options","wordBreak","_codePointsToCharacte3","_codePointsToCharacte4","isLetterNumber","map","forbiddenBreakpoints","str","toCodePoints","output","_cssFormattedClasses","_cssFormattedClasses2","fromCodePoint","Break","start","end","_codePoints","required","slice","apply","_cssFormattedClasses3","_cssFormattedClasses4","lastEnd","nextIndex"],"sources":["/home/sony/Desktop/form/form/node_modules/react-to-pdf/node_modules/css-line-break/dist/LineBreak.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.LineBreaker = exports.inlineBreakOpportunities = exports.lineBreakAtIndex = exports.codePointsToCharacterClasses = exports.UnicodeTrie = exports.BREAK_ALLOWED = exports.BREAK_NOT_ALLOWED = exports.BREAK_MANDATORY = exports.classes = exports.LETTER_NUMBER_MODIFIER = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _Trie = require('./Trie');\n\nvar _linebreakTrie = require('./linebreak-trie');\n\nvar _linebreakTrie2 = _interopRequireDefault(_linebreakTrie);\n\nvar _Util = require('./Util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LETTER_NUMBER_MODIFIER = exports.LETTER_NUMBER_MODIFIER = 50;\n\n// Non-tailorable Line Breaking Classes\nvar BK = 1; //  Cause a line break (after)\nvar CR = 2; //  Cause a line break (after), except between CR and LF\nvar LF = 3; //  Cause a line break (after)\nvar CM = 4; //  Prohibit a line break between the character and the preceding character\nvar NL = 5; //  Cause a line break (after)\nvar SG = 6; //  Do not occur in well-formed text\nvar WJ = 7; //  Prohibit line breaks before and after\nvar ZW = 8; //  Provide a break opportunity\nvar GL = 9; //  Prohibit line breaks before and after\nvar SP = 10; // Enable indirect line breaks\nvar ZWJ = 11; // Prohibit line breaks within joiner sequences\n// Break Opportunities\nvar B2 = 12; //  Provide a line break opportunity before and after the character\nvar BA = 13; //  Generally provide a line break opportunity after the character\nvar BB = 14; //  Generally provide a line break opportunity before the character\nvar HY = 15; //  Provide a line break opportunity after the character, except in numeric context\nvar CB = 16; //   Provide a line break opportunity contingent on additional information\n// Characters Prohibiting Certain Breaks\nvar CL = 17; //  Prohibit line breaks before\nvar CP = 18; //  Prohibit line breaks before\nvar EX = 19; //  Prohibit line breaks before\nvar IN = 20; //  Allow only indirect line breaks between pairs\nvar NS = 21; //  Allow only indirect line breaks before\nvar OP = 22; //  Prohibit line breaks after\nvar QU = 23; //  Act like they are both opening and closing\n// Numeric Context\nvar IS = 24; //  Prevent breaks after any and before numeric\nvar NU = 25; //  Form numeric expressions for line breaking purposes\nvar PO = 26; //  Do not break following a numeric expression\nvar PR = 27; //  Do not break in front of a numeric expression\nvar SY = 28; //  Prevent a break before; and allow a break after\n// Other Characters\nvar AI = 29; //  Act like AL when the resolvedEAW is N; otherwise; act as ID\nvar AL = 30; //  Are alphabetic characters or symbols that are used with alphabetic characters\nvar CJ = 31; //  Treat as NS or ID for strict or normal breaking.\nvar EB = 32; //  Do not break from following Emoji Modifier\nvar EM = 33; //  Do not break from preceding Emoji Base\nvar H2 = 34; //  Form Korean syllable blocks\nvar H3 = 35; //  Form Korean syllable blocks\nvar HL = 36; //  Do not break around a following hyphen; otherwise act as Alphabetic\nvar ID = 37; //  Break before or after; except in some numeric context\nvar JL = 38; //  Form Korean syllable blocks\nvar JV = 39; //  Form Korean syllable blocks\nvar JT = 40; //  Form Korean syllable blocks\nvar RI = 41; //  Keep pairs together. For pairs; break before and after other classes\nvar SA = 42; //  Provide a line break opportunity contingent on additional, language-specific context analysis\nvar XX = 43; //  Have as yet unknown line breaking behavior or unassigned code positions\n\nvar classes = exports.classes = {\n    BK: BK,\n    CR: CR,\n    LF: LF,\n    CM: CM,\n    NL: NL,\n    SG: SG,\n    WJ: WJ,\n    ZW: ZW,\n    GL: GL,\n    SP: SP,\n    ZWJ: ZWJ,\n    B2: B2,\n    BA: BA,\n    BB: BB,\n    HY: HY,\n    CB: CB,\n    CL: CL,\n    CP: CP,\n    EX: EX,\n    IN: IN,\n    NS: NS,\n    OP: OP,\n    QU: QU,\n    IS: IS,\n    NU: NU,\n    PO: PO,\n    PR: PR,\n    SY: SY,\n    AI: AI,\n    AL: AL,\n    CJ: CJ,\n    EB: EB,\n    EM: EM,\n    H2: H2,\n    H3: H3,\n    HL: HL,\n    ID: ID,\n    JL: JL,\n    JV: JV,\n    JT: JT,\n    RI: RI,\n    SA: SA,\n    XX: XX\n};\n\nvar BREAK_MANDATORY = exports.BREAK_MANDATORY = '!';\nvar BREAK_NOT_ALLOWED = exports.BREAK_NOT_ALLOWED = '×';\nvar BREAK_ALLOWED = exports.BREAK_ALLOWED = '÷';\nvar UnicodeTrie = exports.UnicodeTrie = (0, _Trie.createTrieFromBase64)(_linebreakTrie2.default);\n\nvar ALPHABETICS = [AL, HL];\nvar HARD_LINE_BREAKS = [BK, CR, LF, NL];\nvar SPACE = [SP, ZW];\nvar PREFIX_POSTFIX = [PR, PO];\nvar LINE_BREAKS = HARD_LINE_BREAKS.concat(SPACE);\nvar KOREAN_SYLLABLE_BLOCK = [JL, JV, JT, H2, H3];\nvar HYPHEN = [HY, BA];\n\nvar codePointsToCharacterClasses = exports.codePointsToCharacterClasses = function codePointsToCharacterClasses(codePoints) {\n    var lineBreak = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'strict';\n\n    var types = [];\n    var indicies = [];\n    var categories = [];\n    codePoints.forEach(function (codePoint, index) {\n        var classType = UnicodeTrie.get(codePoint);\n        if (classType > LETTER_NUMBER_MODIFIER) {\n            categories.push(true);\n            classType -= LETTER_NUMBER_MODIFIER;\n        } else {\n            categories.push(false);\n        }\n\n        if (['normal', 'auto', 'loose'].indexOf(lineBreak) !== -1) {\n            // U+2010, – U+2013, 〜 U+301C, ゠ U+30A0\n            if ([0x2010, 0x2013, 0x301c, 0x30a0].indexOf(codePoint) !== -1) {\n                indicies.push(index);\n                return types.push(CB);\n            }\n        }\n\n        if (classType === CM || classType === ZWJ) {\n            // LB10 Treat any remaining combining mark or ZWJ as AL.\n            if (index === 0) {\n                indicies.push(index);\n                return types.push(AL);\n            }\n\n            // LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of\n            // the base character in all of the following rules. Treat ZWJ as if it were CM.\n            var prev = types[index - 1];\n            if (LINE_BREAKS.indexOf(prev) === -1) {\n                indicies.push(indicies[index - 1]);\n                return types.push(prev);\n            }\n            indicies.push(index);\n            return types.push(AL);\n        }\n\n        indicies.push(index);\n\n        if (classType === CJ) {\n            return types.push(lineBreak === 'strict' ? NS : ID);\n        }\n\n        if (classType === SA) {\n            return types.push(AL);\n        }\n\n        if (classType === AI) {\n            return types.push(AL);\n        }\n\n        // For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL\n        // and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised\n        // to take into account the actual line breaking properties for these characters.\n        if (classType === XX) {\n            if (codePoint >= 0x20000 && codePoint <= 0x2fffd || codePoint >= 0x30000 && codePoint <= 0x3fffd) {\n                return types.push(ID);\n            } else {\n                return types.push(AL);\n            }\n        }\n\n        types.push(classType);\n    });\n\n    return [indicies, types, categories];\n};\n\nvar isAdjacentWithSpaceIgnored = function isAdjacentWithSpaceIgnored(a, b, currentIndex, classTypes) {\n    var current = classTypes[currentIndex];\n    if (Array.isArray(a) ? a.indexOf(current) !== -1 : a === current) {\n        var i = currentIndex;\n        while (i <= classTypes.length) {\n            i++;\n            var next = classTypes[i];\n\n            if (next === b) {\n                return true;\n            }\n\n            if (next !== SP) {\n                break;\n            }\n        }\n    }\n\n    if (current === SP) {\n        var _i = currentIndex;\n\n        while (_i > 0) {\n            _i--;\n            var prev = classTypes[_i];\n\n            if (Array.isArray(a) ? a.indexOf(prev) !== -1 : a === prev) {\n                var n = currentIndex;\n                while (n <= classTypes.length) {\n                    n++;\n                    var _next = classTypes[n];\n\n                    if (_next === b) {\n                        return true;\n                    }\n\n                    if (_next !== SP) {\n                        break;\n                    }\n                }\n            }\n\n            if (prev !== SP) {\n                break;\n            }\n        }\n    }\n    return false;\n};\n\nvar previousNonSpaceClassType = function previousNonSpaceClassType(currentIndex, classTypes) {\n    var i = currentIndex;\n    while (i >= 0) {\n        var type = classTypes[i];\n        if (type === SP) {\n            i--;\n        } else {\n            return type;\n        }\n    }\n    return 0;\n};\n\nvar _lineBreakAtIndex = function _lineBreakAtIndex(codePoints, classTypes, indicies, index, forbiddenBreaks) {\n    if (indicies[index] === 0) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    var currentIndex = index - 1;\n    if (Array.isArray(forbiddenBreaks) && forbiddenBreaks[currentIndex] === true) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    var beforeIndex = currentIndex - 1;\n    var afterIndex = currentIndex + 1;\n    var current = classTypes[currentIndex];\n\n    // LB4 Always break after hard line breaks.\n    // LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.\n    var before = beforeIndex >= 0 ? classTypes[beforeIndex] : 0;\n    var next = classTypes[afterIndex];\n\n    if (current === CR && next === LF) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    if (HARD_LINE_BREAKS.indexOf(current) !== -1) {\n        return BREAK_MANDATORY;\n    }\n\n    // LB6 Do not break before hard line breaks.\n    if (HARD_LINE_BREAKS.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB7 Do not break before spaces or zero width space.\n    if (SPACE.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB8 Break before any character following a zero-width space, even if one or more spaces intervene.\n    if (previousNonSpaceClassType(currentIndex, classTypes) === ZW) {\n        return BREAK_ALLOWED;\n    }\n\n    // LB8a Do not break between a zero width joiner and an ideograph, emoji base or emoji modifier.\n    if (UnicodeTrie.get(codePoints[currentIndex]) === ZWJ && (next === ID || next === EB || next === EM)) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB11 Do not break before or after Word joiner and related characters.\n    if (current === WJ || next === WJ) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB12 Do not break after NBSP and related characters.\n    if (current === GL) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB12a Do not break before NBSP and related characters, except after spaces and hyphens.\n    if ([SP, BA, HY].indexOf(current) === -1 && next === GL) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.\n    if ([CL, CP, EX, IS, SY].indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB14 Do not break after ‘[’, even after spaces.\n    if (previousNonSpaceClassType(currentIndex, classTypes) === OP) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB15 Do not break within ‘”[’, even with intervening spaces.\n    if (isAdjacentWithSpaceIgnored(QU, OP, currentIndex, classTypes)) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.\n    if (isAdjacentWithSpaceIgnored([CL, CP], NS, currentIndex, classTypes)) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB17 Do not break within ‘——’, even with intervening spaces.\n    if (isAdjacentWithSpaceIgnored(B2, B2, currentIndex, classTypes)) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB18 Break after spaces.\n    if (current === SP) {\n        return BREAK_ALLOWED;\n    }\n\n    // LB19 Do not break before or after quotation marks, such as ‘ ” ’.\n    if (current === QU || next === QU) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB20 Break before and after unresolved CB.\n    if (next === CB || current === CB) {\n        return BREAK_ALLOWED;\n    }\n\n    // LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.\n    if ([BA, HY, NS].indexOf(next) !== -1 || current === BB) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB21a Don't break after Hebrew + Hyphen.\n    if (before === HL && HYPHEN.indexOf(current) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB21b Don’t break between Solidus and Hebrew letters.\n    if (current === SY && next === HL) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB22 Do not break between two ellipses, or between letters, numbers or exclamations and ellipsis.\n    if (next === IN && ALPHABETICS.concat(IN, EX, NU, ID, EB, EM).indexOf(current) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB23 Do not break between digits and letters.\n    if (ALPHABETICS.indexOf(next) !== -1 && current === NU || ALPHABETICS.indexOf(current) !== -1 && next === NU) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.\n    if (current === PR && [ID, EB, EM].indexOf(next) !== -1 || [ID, EB, EM].indexOf(current) !== -1 && next === PO) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.\n    if (ALPHABETICS.indexOf(current) !== -1 && PREFIX_POSTFIX.indexOf(next) !== -1 || PREFIX_POSTFIX.indexOf(current) !== -1 && ALPHABETICS.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB25 Do not break between the following pairs of classes relevant to numbers:\n    if (\n    // (PR | PO) × ( OP | HY )? NU\n    [PR, PO].indexOf(current) !== -1 && (next === NU || [OP, HY].indexOf(next) !== -1 && classTypes[afterIndex + 1] === NU) ||\n    // ( OP | HY ) × NU\n    [OP, HY].indexOf(current) !== -1 && next === NU ||\n    // NU ×\t(NU | SY | IS)\n    current === NU && [NU, SY, IS].indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // NU (NU | SY | IS)* × (NU | SY | IS | CL | CP)\n    if ([NU, SY, IS, CL, CP].indexOf(next) !== -1) {\n        var prevIndex = currentIndex;\n        while (prevIndex >= 0) {\n            var type = classTypes[prevIndex];\n            if (type === NU) {\n                return BREAK_NOT_ALLOWED;\n            } else if ([SY, IS].indexOf(type) !== -1) {\n                prevIndex--;\n            } else {\n                break;\n            }\n        }\n    }\n\n    // NU (NU | SY | IS)* (CL | CP)? × (PO | PR))\n    if ([PR, PO].indexOf(next) !== -1) {\n        var _prevIndex = [CL, CP].indexOf(current) !== -1 ? beforeIndex : currentIndex;\n        while (_prevIndex >= 0) {\n            var _type = classTypes[_prevIndex];\n            if (_type === NU) {\n                return BREAK_NOT_ALLOWED;\n            } else if ([SY, IS].indexOf(_type) !== -1) {\n                _prevIndex--;\n            } else {\n                break;\n            }\n        }\n    }\n\n    // LB26 Do not break a Korean syllable.\n    if (JL === current && [JL, JV, H2, H3].indexOf(next) !== -1 || [JV, H2].indexOf(current) !== -1 && [JV, JT].indexOf(next) !== -1 || [JT, H3].indexOf(current) !== -1 && next === JT) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB27 Treat a Korean Syllable Block the same as ID.\n    if (KOREAN_SYLLABLE_BLOCK.indexOf(current) !== -1 && [IN, PO].indexOf(next) !== -1 || KOREAN_SYLLABLE_BLOCK.indexOf(next) !== -1 && current === PR) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB28 Do not break between alphabetics (“at”).\n    if (ALPHABETICS.indexOf(current) !== -1 && ALPHABETICS.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).\n    if (current === IS && ALPHABETICS.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.\n    if (ALPHABETICS.concat(NU).indexOf(current) !== -1 && next === OP || ALPHABETICS.concat(NU).indexOf(next) !== -1 && current === CP) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB30a Break between two regional indicator symbols if and only if there are an even number of regional\n    // indicators preceding the position of the break.\n    if (current === RI && next === RI) {\n        var i = indicies[currentIndex];\n        var count = 1;\n        while (i > 0) {\n            i--;\n            if (classTypes[i] === RI) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        if (count % 2 !== 0) {\n            return BREAK_NOT_ALLOWED;\n        }\n    }\n\n    // LB30b Do not break between an emoji base and an emoji modifier.\n    if (current === EB && next === EM) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    return BREAK_ALLOWED;\n};\n\nvar lineBreakAtIndex = exports.lineBreakAtIndex = function lineBreakAtIndex(codePoints, index) {\n    // LB2 Never break at the start of text.\n    if (index === 0) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB3 Always break at the end of text.\n    if (index >= codePoints.length) {\n        return BREAK_MANDATORY;\n    }\n\n    var _codePointsToCharacte = codePointsToCharacterClasses(codePoints),\n        _codePointsToCharacte2 = _slicedToArray(_codePointsToCharacte, 2),\n        indicies = _codePointsToCharacte2[0],\n        classTypes = _codePointsToCharacte2[1];\n\n    return _lineBreakAtIndex(codePoints, classTypes, indicies, index);\n};\n\nvar cssFormattedClasses = function cssFormattedClasses(codePoints, options) {\n    if (!options) {\n        options = { lineBreak: 'normal', wordBreak: 'normal' };\n    }\n\n    var _codePointsToCharacte3 = codePointsToCharacterClasses(codePoints, options.lineBreak),\n        _codePointsToCharacte4 = _slicedToArray(_codePointsToCharacte3, 3),\n        indicies = _codePointsToCharacte4[0],\n        classTypes = _codePointsToCharacte4[1],\n        isLetterNumber = _codePointsToCharacte4[2];\n\n    if (options.wordBreak === 'break-all' || options.wordBreak === 'break-word') {\n        classTypes = classTypes.map(function (type) {\n            return [NU, AL, SA].indexOf(type) !== -1 ? ID : type;\n        });\n    }\n\n    var forbiddenBreakpoints = options.wordBreak === 'keep-all' ? isLetterNumber.map(function (isLetterNumber, i) {\n        return isLetterNumber && codePoints[i] >= 0x4e00 && codePoints[i] <= 0x9fff;\n    }) : null;\n\n    return [indicies, classTypes, forbiddenBreakpoints];\n};\n\nvar inlineBreakOpportunities = exports.inlineBreakOpportunities = function inlineBreakOpportunities(str, options) {\n    var codePoints = (0, _Util.toCodePoints)(str);\n    var output = BREAK_NOT_ALLOWED;\n\n    var _cssFormattedClasses = cssFormattedClasses(codePoints, options),\n        _cssFormattedClasses2 = _slicedToArray(_cssFormattedClasses, 3),\n        indicies = _cssFormattedClasses2[0],\n        classTypes = _cssFormattedClasses2[1],\n        forbiddenBreakpoints = _cssFormattedClasses2[2];\n\n    codePoints.forEach(function (codePoint, i) {\n        output += (0, _Util.fromCodePoint)(codePoint) + (i >= codePoints.length - 1 ? BREAK_MANDATORY : _lineBreakAtIndex(codePoints, classTypes, indicies, i + 1, forbiddenBreakpoints));\n    });\n\n    return output;\n};\n\nvar Break = function () {\n    function Break(codePoints, lineBreak, start, end) {\n        _classCallCheck(this, Break);\n\n        this._codePoints = codePoints;\n        this.required = lineBreak === BREAK_MANDATORY;\n        this.start = start;\n        this.end = end;\n    }\n\n    _createClass(Break, [{\n        key: 'slice',\n        value: function slice() {\n            return _Util.fromCodePoint.apply(undefined, _toConsumableArray(this._codePoints.slice(this.start, this.end)));\n        }\n    }]);\n\n    return Break;\n}();\n\nvar LineBreaker = exports.LineBreaker = function LineBreaker(str, options) {\n    var codePoints = (0, _Util.toCodePoints)(str);\n\n    var _cssFormattedClasses3 = cssFormattedClasses(codePoints, options),\n        _cssFormattedClasses4 = _slicedToArray(_cssFormattedClasses3, 3),\n        indicies = _cssFormattedClasses4[0],\n        classTypes = _cssFormattedClasses4[1],\n        forbiddenBreakpoints = _cssFormattedClasses4[2];\n\n    var length = codePoints.length;\n    var lastEnd = 0;\n    var nextIndex = 0;\n\n    return {\n        next: function next() {\n            if (nextIndex >= length) {\n                return { done: true };\n            }\n            var lineBreak = BREAK_NOT_ALLOWED;\n            while (nextIndex < length && (lineBreak = _lineBreakAtIndex(codePoints, classTypes, indicies, ++nextIndex, forbiddenBreakpoints)) === BREAK_NOT_ALLOWED) {}\n\n            if (lineBreak !== BREAK_NOT_ALLOWED || nextIndex === length) {\n                var value = new Break(codePoints, lineBreak, lastEnd, nextIndex);\n                lastEnd = nextIndex;\n                return { value: value, done: false };\n            }\n\n            return { done: true };\n        }\n    };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}